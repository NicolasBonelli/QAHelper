version: '3.8'

services:
  qahelper:
    build:
      context: .
      dockerfile: Dockerfile
    image: qahelper:latest
    container_name: qahelper-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MODEL=${MODEL:-gemini-pro}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BUCKET_NAME=${BUCKET_NAME}
      - DATABASE_URL=${DATABASE_URL}
      - MCP_RAG_SERVER_URL=${MCP_RAG_SERVER_URL}
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
    networks:
      - qahelper-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: qahelper-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-qahelper}
      - POSTGRES_USER=${POSTGRES_USER:-qahelper}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/utils/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - qahelper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-qahelper}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: qahelper-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qahelper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: qahelper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - qahelper
    networks:
      - qahelper-network

  # Agente MCP RAG (opcional)
  mcp-rag-server:
    build:
      context: .
      dockerfile: DockerFile.agent
    container_name: qahelper-mcp-rag
    restart: unless-stopped
    environment:
      - MCP_SERVER_PORT=8001
    ports:
      - "8001:8001"
    networks:
      - qahelper-network
    profiles:
      - mcp

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  qahelper-network:
    driver: bridge
