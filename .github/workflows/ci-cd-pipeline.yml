#name: QAHelper CI/CD Pipeline

on:
  push:
    #branches: [ main, develop ]
  #pull_request:
    #branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: qahelper

jobs:
  # Job de Tests y Linting
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
        
    - name: Run type checking with MyPy
      run: |
        mypy backend/ --ignore-missing-imports
        
    - name: Run supervisor architecture tests
      run: |
        python -m pytest tests/test_supervisor_architecture.py -v
        

  # Job de Build Docker
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-and-lint, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de Deployment (Staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos para deployar a staging
        # Por ejemplo: kubectl apply, docker-compose, etc.
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Tests básicos para verificar que el deployment funciona

  # Job de Deployment (Production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos para deployar a producción
        
    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        # Verificaciones de salud del sistema en producción
        
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        # Aquí se podría agregar notificación a Slack, email, etc.

