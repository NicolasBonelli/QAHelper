# name: QAHelper CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
 

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: qahelper

jobs:
  # Job de Tests y Linting
  test-and-lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qahelper
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8

    - name: Prepare test database (qahelper) and pgvector extension
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        sudo apt-get update -y
        sudo apt-get install -y postgresql-client
        PGPASSWORD=$POSTGRES_PASSWORD psql -h 127.0.0.1 -U $POSTGRES_USER -p 5432 -c "CREATE DATABASE qahelper;" || true
        PGPASSWORD=$POSTGRES_PASSWORD psql -h 127.0.0.1 -U $POSTGRES_USER -p 5432 -d qahelper -c "CREATE EXTENSION IF NOT EXISTS vector;"

    - name: Run supervisor architecture tests (including E2E)
      run: |
        python -m pytest tests/test_supervisor_architecture.py -v
        

  

  # Job de Deployment (Staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos para deployar a staging
        # Por ejemplo: kubectl apply, docker-compose, etc.
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Tests básicos para verificar que el deployment funciona

  # Job de Deployment (Production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos para deployar a producción
        
    - name: Run production health checks
      run: |
        echo "Running health checks on production..."
        # Verificaciones de salud del sistema en producción
        
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        # Aquí se podría agregar notificación a Slack, email, etc.
